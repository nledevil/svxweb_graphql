import fs from 'fs';
import ini from './utils/ini';
import sql from './sql';
import sqltables from '../config/sqltables';

const { svxlinkTable } = sqltables;

const version = '1.0.0';

const iniHeader = `# Configuration file for the Svxlink Server\n# GENERATED BY SVXWEB V${version}\n# Written By W9UEY\n# DO NOT EDIT - EDITS WILL BE OVERWRITTEN\n`;

const convertINIToDB = (config) => {
  const dbArray = [];
  const headerNames = Object.keys(config);
  for (let i = 0; i < headerNames.length; i += 1) {
    const headerName = headerNames[i];
    const settings = config[headerName];
    const settingNames = Object.keys(settings);
    for (let s = 0; s < settingNames.length; s += 1) {
      const settingName = settingNames[s];
      const settingValue = settings[settingName];
      dbArray.push({
        headerName,
        settingName,
        settingValue,
      });
    }
  }
  return dbArray;
}

export const readINIConfig = async () => {
  console.log('Reading SVXLINK Config Files');
  const svxConfigFile = fs.readFileSync(`${__dirname}/svxlink.conf`, 'utf-8');
  const config = ini.decode(svxConfigFile);
  // const config = ini.parse(svxConfigFile);
  const dbConfig = convertINIToDB(config);
  await sql.delAll(svxlinkTable);
  const results = await sql.batchInsert(svxlinkTable, {
    input: dbConfig,
  });
  return results;
};

export const writeINIConfig = async () => {
  const dbConfig = await sql.get(svxlinkTable);
  const config = ini.encode(dbConfig, iniHeader);
  fs.writeFileSync(`${__dirname}/svxlink_new.conf`, config);
  return 'Complete';
}